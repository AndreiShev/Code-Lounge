server:
  port: 0

spring:
  application:
    name: social-network-auth
  liquibase:
    enabled: true
  jpa:
    open-in-view: false
  datasource:
    url: jdbc:postgresql://176.123.168.208:5432/social-network-auth
    username: postgres
    password: postgres
    hikari:
      schema: auth_schema
      connection-init-sql: CREATE schema  if not exists auth_schema
      connection-timeout: 10000
  data:
    redis:
      host: 176.123.168.208
      port: 6379
  kafka:
    bootstrap-servers: 176.123.168.208:9093
app:
  jwt:
    secret: "SomeSecretKey"
    tokenExpiration: 24h
    refreshTokenExpiration: 24h
  kafka:
    kafkaAuthTopic: "auth-topic"
    kafkaActionTopic: "action-topic"
    kafkaMessageGroupId: "kafka-message-group-id"

eureka:
  client:
    enabled: true
    service-url:
#      defaultZone: http://localhost:8761/eureka/
      defaultZone: http://89.111.174.153:8761/eureka/

geo:
  base_request_url: http://89.111.174.153:9090
  saveCaptchaUrl: /api/v1/storage




#spring:
#  application:
#    name: social-network-auth
#  liquibase:
#    enabled: false
#  jpa:
#    open-in-view: false
#    hibernate:
#      ddl-auto: create
#  datasource:
#    url: jdbc:postgresql://localhost:6432/social_network_auth
#    username: postgres
#    password: postgres
#    hikari:
#      schema: auth_schema
#      connection-init-sql: CREATE schema  if not exists auth_schema
#      connection-timeout: 10000
#  data:
#    redis:
#      host: localhost
#      port: 6379
#  kafka:
#    bootstrap-servers: localhost:9093
#
#app:
#  jwt:
#    secret: "SomeSecretKey"
#    tokenExpiration: 3m
#    refreshTokenExpiration: 30m
#  kafka:
#    kafkaAuthTopic: "auth-topic"
#    kafkaNewAccountTopic: "new-account-topic"
#    kafkaMessageGroupId: "kafka-message-group-id"
